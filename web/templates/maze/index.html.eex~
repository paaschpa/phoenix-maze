    <h2>HTML5 Maze Game</h2>
    <p>
        Welcome!<br />        
        This is a HTML5 Maze Game created by <a href="http://www.codeproject.com/script/Membership/View.aspx?mid=8966127">ProgramFOX</a>.
    </p>
    <canvas width="616" height="556" id="mazecanvas">Can't load the maze game, because your browser doesn't support HTML5.</canvas>
    <noscript>JavaScript is not enabled. To play the game, you should enable it.</noscript>
    <script>
        function guid() {
            var ret = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);});
            return ret;
        }
        // Maze game created by ProgramFOX; http://www.codeproject.com/Members/ProgramFOX
        // Licensed under CPOL: http://www.codeproject.com/info/cpol10.aspx

        // 425 (X), 3 (Y) RECTANGLE
        // 542 (center X), 122 (center Y) CIRCLE
        var canvas = document.getElementById("mazecanvas");
        var context = canvas.getContext("2d");
        var mazeWidth = 556;
        var mazeHeight = 556;
        var intervalVar;

        var myId = guid();
        var me = {playerId: myId, posX: 425, posY: 3, style: '#0000FF'};
        var players = {};
        players[myId] = me;

        var socket = new Phoenix.Socket("/ws")
        socket.connect()
        var chan = socket.chan("maze:lobby", {})
        chan.join().receive("ok", function(chan) {
            console.log("Success!")
        });

        chan.on("move_player", function(payload) {
            console.log(payload);
            if (me.playerId == payload.playerId) {
                return; //don't need to me self
            }

            if (!players[payload.playerId]) {
                players[payload.playerId] = payload; //add player if doesn't exist
            }

            var player = players[payload.playerId];
            makeWhite(player.posX, player.posY, 15, 15);
            players[playload.playerId].posX = payload.posX;
            players[playload.playerId].posY = payload.posY;
            drawPlayer(payload);
        })

        function drawMazeAndRectangle(player) {
            makeWhite(0, 0, canvas.width, canvas.height);
            var mazeImg = new Image();
            mazeImg.onload = function () {
                context.drawImage(mazeImg, 0, 0);
                drawPlayer(player);
                context.beginPath();
                context.arc(542, 122, 7, 0, 2 * Math.PI, false);
                context.closePath();
                context.fillStyle = '#00FF00';
                context.fill();
            };
            mazeImg.src = "images/maze.gif";
        }

        function drawPlayer(player) {
            context.beginPath();
            context.rect(player.posX, player.posY, 15, 15);
            context.closePath();
            context.fillStyle = player.style;
            context.fill();
        }

        function moveRect(e) {
            var newX;
            var newY;
            var movingAllowed;
            e = e || window.event;
            switch (e.keyCode) {
                case 38:   // arrow up key
                case 87: // W key
                    newX = me.posX;
                    newY = me.posY - 3;
                    break;
                case 37: // arrow left key
                case 65: // A key
                    newX = me.posX - 3;
                    newY = me.posY;
                    break;
                case 40: // arrow down key
                case 83: // S key
                    newX = me.posX;
                    newY = me.posY + 3;
                    break;
                case 39: // arrow right key
                case 68: // D key
                    newX = me.posX + 3;
                    newY = me.posY;
                    break;
            }
            movingAllowed = canMoveTo(newX, newY);
            if (movingAllowed === 1) {      // 1 means 'the rectangle can move'
                makeWhite(me.posX, me.posY, 15, 15);
                me.posX = newX;
                me.posY = newY;
                drawPlayer(me);
                chan.push('move_player', me);
            }
            else if (movingAllowed === 2) { // 2 means 'the rectangle reached the end point'
                clearInterval(intervalVar);
                makeWhite(0, 0, canvas.width, canvas.height);
                context.font = "40px Arial";
                context.fillStyle = "blue";
                context.textAlign = "center";
                context.textBaseline = "middle";
                context.fillText("Congratulations!", canvas.width / 2, canvas.height / 2);
                window.removeEventListener("keydown", moveRect, true);
            }
        }

        function canMoveTo(destX, destY) {
            var imgData = context.getImageData(destX, destY, 15, 15);
            var data = imgData.data;
            var canMove = 1; // 1 means: the rectangle can move
            if (destX >= 0 && destX <= mazeWidth - 15 && destY >= 0 && destY <= mazeHeight - 15) {
                for (var i = 0; i < 4 * 15 * 15; i += 4) {
                    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0) { // black
                        canMove = 0; // 0 means: the rectangle can't move
                        break;
                    }
                    else if (data[i] === 0 && data[i + 1] === 255 && data[i + 2] === 0) { // #00FF00
                        canMove = 2; // 2 means: the end point is reached
                        break;
                    }
                }
            }
            else {
                canMove = 0;
            }
            return canMove;
        }

        function createTimer(seconds) {
            intervalVar = setInterval(function () {
                makeWhite(mazeWidth, 0, canvas.width - mazeWidth, canvas.height);
                if (seconds === 0) {
                    clearInterval(intervalVar);
                    window.removeEventListener("keydown", moveRect, true);
                    makeWhite(0, 0, canvas.width, canvas.height);
                    context.font = "40px Arial";
                    context.fillStyle = "red";
                    context.textAlign = "center";
                    context.textBaseline = "middle";
                    context.fillText("Time's up!", canvas.width / 2, canvas.height / 2);
                    return;
                }
                context.font = "20px Arial";
                if (seconds <= 10 && seconds > 5) {
                    context.fillStyle = "orangered";
                }
                else if (seconds <= 5) {
                    context.fillStyle = "red";
                }
                else {
                    context.fillStyle = "green";
                }
                context.textAlign = "center";
                context.textBaseline = "middle";
                var minutes = Math.floor(seconds / 60);
                var secondsToShow = (seconds - minutes * 60).toString();
                if (secondsToShow.length === 1) {
                    secondsToShow = "0" + secondsToShow; // if the number of seconds is '5' for example, make sure that it is shown as '05'
                }
                context.fillText(minutes.toString() + ":" + secondsToShow, mazeWidth + 30, canvas.height / 2);
                seconds--;
            }, 1000);
        }

        function makeWhite(x, y, w, h) {
            context.beginPath();
            context.rect(x, y, w, h);
            context.closePath();
            context.fillStyle = "white";
            context.fill();
        }

        drawMazeAndRectangle(players[myId]);
        window.addEventListener("keydown", moveRect, true);
        //createTimer(120); // 2 minutes
       

    </script>
